function [map cluster] = EM(img)

%% creat the distribution X (copy paste from meanshiftSeg.m)
width = size(img,2) ; height = size(img,1) ;
L = width*height ;
l = (reshape(img(:,:,1), 1,L)) ;
a = (reshape(img(:,:,2), 1,L)) ;
b = (reshape(img(:,:,3), 1,L)) ;
X = [l;a;b] ;
%I need to normalize the points, This will amke it much easier to chose
%threshold parameters (adapt function from HW1)
Xh = [X ; ones(1,L)] ;
size(Xh) ;
Xh = double(Xh) ;
[Xhn, T] = normalization(Xh) ;
% these will help me understand the distribution in the image to set a
% radius and a tolerance to stop lookign for new mean
max_im = max(max(X)) ; % 249
min_im = min(min(X)) ; % 9
mean_im = mean(norm(double(X))) ; %116

%% generate the parameters
%number of clusters (depends on the image we have)
K = 6 ;
% dummy initialization of alpha 
alpha_s = ones(1,K)/K;

% Find ranges of values in L*a*b space
LMax = max(Xn(:,1)); Lmin = min(Xn(:,1));
aMax = max(Xn(:,2)); amin = min(Xn(:,2));
bMax = max(Xn(:,3)); bmin = min(Xn(:,3));
% use function generate_mu to initialize mus
mu = generate_mu(LMax,Lmin,aMax,amin,bMax,bmin,K);
% use function generate_cov to initialize covariances
var = generate_cov(LMax,Lmin,aMax,amin,bMax,bmin,K);


% iterate between maximization and expectation
% use function maximization
% use function expectation
P = expectation(mu,var,alpha,X) ;

end